openapi: 3.0.3
info:
  title: Task Management Service API
  description: |
    A RESTful API for managing tasks with user authentication.

    ## Authentication
    This API uses JWT tokens for authentication:
    - **Access Token**: Bearer token sent in Authorization header
    - **Refresh Token**: HTTP-only cookie for token renewal

    ## Data Format
    This API follows JSON:API specification for consistent response formatting.
  version: 1.0.0
  contact:
    name: Edis Veljacic
    email: edis@example.com
  license:
    name: ISC

servers:
  - url: http://localhost:3000
    description: Development server
  - url: https://api.taskmanagement.example.com
    description: Production server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token

  schemas:
    # User Related Schemas
    UserRegistration:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          minLength: 1
          description: User's password
          example: mySecurePassword123

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          minLength: 1
          description: User's password
          example: mySecurePassword123

    User:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_in:
          type: integer
          description: Token expiration time in seconds
          example: 3600
        token_type:
          type: string
          description: Token type
          example: Bearer
        user:
          $ref: '#/components/schemas/User'

    # Task Related Schemas
    TaskCreate:
      type: object
      required:
        - title
        - due_date
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Task title
          example: Complete project documentation
        description:
          type: string
          description: Task description
          example: Write comprehensive API documentation for the project
        due_date:
          type: string
          format: date
          description: Task due date (must be in the future)
          example: 2024-12-31
        status:
          type: string
          enum: [open, closed]
          default: open
          description: Task status
          example: open

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Task title
          example: Complete project documentation
        description:
          type: string
          description: Task description
          example: Write comprehensive API documentation for the project
        due_date:
          type: string
          format: date-time
          description: Task due date (must be in the future)
          example: 2024-12-31T23:59:59Z
        status:
          type: string
          enum: [open, closed]
          description: Task status
          example: open

    TaskAttributes:
      type: object
      properties:
        title:
          type: string
          description: Task title
          example: Complete project documentation
        description:
          type: string
          nullable: true
          description: Task description
          example: Write comprehensive API documentation for the project
        status:
          type: string
          enum: [open, closed]
          description: Task status
          example: open
        createdAt:
          type: string
          format: date-time
          description: Task creation timestamp
          example: 2024-01-15T10:30:00Z
        updatedAt:
          type: string
          format: date-time
          description: Task last update timestamp
          example: 2024-01-16T14:20:00Z
        dueDate:
          type: string
          format: date
          description: Task due date
          example: 2024-12-31

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Task unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        type:
          type: string
          description: Resource type (always "tasks")
          example: tasks
        attributes:
          $ref: '#/components/schemas/TaskAttributes'

    TaskResponse:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Task'

    TaskListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        meta:
          type: object
          properties:
            pagination:
              $ref: '#/components/schemas/Pagination'
            stats:
              $ref: '#/components/schemas/TaskStats'

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
          example: 1
        limit:
          type: integer
          description: Items per page
          example: 10
        total:
          type: integer
          description: Total number of items
          example: 50
        totalPages:
          type: integer
          description: Total number of pages
          example: 5

    TaskStats:
      type: object
      properties:
        total:
          type: integer
          description: Total number of tasks
          example: 50
        open:
          type: integer
          description: Number of open tasks
          example: 30
        closed:
          type: integer
          description: Number of closed tasks
          example: 20

    # Health Check Schema
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          description: Service status
          example: OK
        timestamp:
          type: string
          format: date-time
          description: Current timestamp
          example: 2024-01-15T10:30:00Z
        service:
          type: string
          description: Service name
          example: task-management-service

    # Error Schemas (JSON:API format)
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorObject'

    ErrorObject:
      type: object
      properties:
        status:
          type: string
          description: HTTP status code
          example: "400"
        title:
          type: string
          description: Error title
          example: Validation Error
        detail:
          type: string
          description: Error details
          example: The title field is required
        code:
          type: string
          description: Application-specific error code
          example: VALIDATION_ERROR
        source:
          type: object
          properties:
            pointer:
              type: string
              description: JSON Pointer to the error location
              example: /data/attributes/title

    # Generic Success Responses
    RegistrationResponse:
      type: object
      properties:
        message:
          type: string
          example: User registered successfully
        user:
          $ref: '#/components/schemas/User'

  parameters:
    TaskId:
      name: id
      in: path
      required: true
      description: Task unique identifier
      schema:
        type: string
        format: uuid
        example: 123e4567-e89b-12d3-a456-426614174000

    StatusFilter:
      name: status
      in: query
      description: Filter tasks by status
      schema:
        type: string
        enum: [open, closed]
        example: open

    DueDateFilter:
      name: due_date
      in: query
      description: Filter tasks by due date
      schema:
        type: string
        enum: [today, this_week, overdue]
        example: today

    SearchQuery:
      name: search
      in: query
      description: Search tasks by title or description
      schema:
        type: string
        minLength: 1
        example: documentation

    PageNumber:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
        example: 1

    PageLimit:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
        example: 10

  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - status: "400"
                title: "Bad Request"
                detail: "Invalid request format"
                code: "BAD_REQUEST"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - status: "401"
                title: "Unauthorized"
                detail: "Authentication required"
                code: "UNAUTHORIZED"

    NotFound:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - status: "404"
                title: "Resource Not Found"
                detail: "The requested task was not found."
                code: "NOT_FOUND"

    ValidationError:
      description: Validation Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - status: "422"
                title: "Validation Error"
                detail: "Title is required"
                code: "VALIDATION_ERROR"
                source:
                  pointer: "/data/attributes/title"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            errors:
              - status: "500"
                title: "Internal Server Error"
                detail: "An unexpected error occurred"
                code: "INTERNAL_ERROR"

paths:
  /health:
    get:
      summary: Health Check
      description: Check the health status of the service
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /api/v1/auth/register:
    post:
      summary: Register User
      description: Register a new user account
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
        '400':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - status: "400"
                    title: "User already exists"
                    code: "user_already_exists"
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/auth/login:
    post:
      summary: User Login
      description: Authenticate user and return access token with refresh token cookie
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          headers:
            Set-Cookie:
              description: HTTP-only refresh token cookie
              schema:
                type: string
                example: refreshToken=abc123; HttpOnly; Secure; SameSite=Lax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                errors:
                  - status: "401"
                    title: "Invalid credentials"
                    code: "invalid_credentials"
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/auth/refresh:
    post:
      summary: Refresh Token
      description: |
        Refresh the access token using the refresh token from cookies.
        Returns new access token and sets new refresh token cookie.
      tags:
        - Authentication
      security: []
      responses:
        '200':
          description: Token refreshed successfully
          headers:
            Set-Cookie:
              description: New HTTP-only refresh token cookie
              schema:
                type: string
                example: refreshToken=xyz789; HttpOnly; Secure; SameSite=Lax
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid or missing refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  summary: Missing refresh token
                  value:
                    errors:
                      - status: "401"
                        title: "Missing refresh token"
                        code: "missing_refresh_token"
                invalid_token:
                  summary: Invalid refresh token
                  value:
                    errors:
                      - status: "401"
                        title: "Invalid refresh token"
                        code: "invalid_refresh_token"
                invalid_session:
                  summary: Invalid session
                  value:
                    errors:
                      - status: "401"
                        title: "Invalid session"
                        code: "invalid_session"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/auth/logout:
    post:
      summary: User Logout
      description: |
        Logout user and revoke refresh token.
        Clears the refresh token cookie and invalidates the session.
      tags:
        - Authentication
      security: []
      responses:
        '204':
          description: Logout successful
          headers:
            Set-Cookie:
              description: Cleared refresh token cookie
              schema:
                type: string
                example: refreshToken=; HttpOnly; Secure; SameSite=Lax; Max-Age=0

  /api/v1/tasks:
    post:
      summary: Create Task
      description: Create a new task for the authenticated user
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List Tasks
      description: Get a paginated list of tasks with optional filtering and search
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/StatusFilter'
        - $ref: '#/components/parameters/DueDateFilter'
        - $ref: '#/components/parameters/SearchQuery'
        - $ref: '#/components/parameters/PageNumber'
        - $ref: '#/components/parameters/PageLimit'
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/tasks/{id}:
    get:
      summary: Get Task
      description: Get a specific task by ID
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update Task (Full)
      description: Completely update a task (all fields required)
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      summary: Update Task (Partial)
      description: Partially update a task (only provided fields will be updated)
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete Task
      description: Delete a specific task by ID
      tags:
        - Tasks
      parameters:
        - $ref: '#/components/parameters/TaskId'
      responses:
        '204':
          description: Task deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

tags:
  - name: Health
    description: Service health monitoring
  - name: Authentication
    description: User authentication and session management
  - name: Tasks
    description: Task management operations