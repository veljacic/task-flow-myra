services:
  database:
    image: postgres:15-alpine
    container_name: task-management-db
    ports:
      - "5435:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

  api:
    build:
      context: ./task-management-service
      dockerfile: Dockerfile
    container_name: task-management-service
    ports:
      - "${API_PORT}:3000"
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - app-network

  migrations:
    build:
      context: ./task-management-service
      dockerfile: Dockerfile
    container_name: task-management-db-migrations
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy
    command: npm run migrate
    restart: "no" # Don't restart after completion
    networks:
      - app-network

  frontend:
    build:
      context: ./task-management-ui
      dockerfile: Dockerfile
    container_name: task-management-ui
    ports:
      - "${FRONTEND_PORT}:80"
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
